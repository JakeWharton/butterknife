apply plugin: 'com.android.library'
apply plugin: 'com.kageiit.lintrules'

android {
  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    minSdkVersion versions.minSdk

    consumerProguardFiles 'proguard-rules.txt'

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }
}

dependencies {
  compile project(':butterknife-annotations')
  compile deps.support.annotations
  compile deps.support.compat

  lintRules project(':butterknife-lint')

  androidTestCompile deps.junit
  androidTestCompile deps.truth
  androidTestCompile deps.support.test.runner

  testCompile deps.junit
  testCompile deps.truth
  testCompile deps.compiletesting
  testCompile files(getRuntimeJar())
  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
  testCompile project(':butterknife-compiler')
}

def getRuntimeJar() {
  try {
    final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
    File runtimeJar = new File(javaBase, "lib/rt.jar");
    if (runtimeJar.exists()) {
      return runtimeJar;
    }
    runtimeJar = new File(javaBase, "jre/lib/rt.jar");
    return runtimeJar.exists() ? runtimeJar : null;
  } catch (IOException e) {
    throw new RuntimeException(e);
  }
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
