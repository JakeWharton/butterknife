apply plugin: 'com.android.library'

android {
  compileSdkVersion versions.compileSdk

  defaultConfig {
    minSdkVersion versions.minSdk

    consumerProguardFiles 'proguard-rules.txt'

    testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath = true
      }
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
    // We run a full lint analysis as build part in CI, so skip vital checks for assemble tasks.
    checkReleaseBuilds false
  }
}

dependencies {
  api project(':butterknife-annotations')
  api deps.support.compat

  lintChecks project(':butterknife-lint')

  androidTestImplementation deps.junit
  androidTestImplementation deps.truth
  androidTestImplementation deps.support.test.runner
  androidTestAnnotationProcessor project(':butterknife-compiler')

  testImplementation deps.junit
  testImplementation deps.truth
  testImplementation deps.compiletesting
  testImplementation files(getRuntimeJar())
  testImplementation files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
  testImplementation project(':butterknife-compiler')
  testCompileOnly deps.javapoet
}

static def getRuntimeJar() {
  final javaBase = new File(System.properties.'java.home').canonicalFile
  [ 'lib/rt.jar', 'jre/lib/rt.jar' ]
      .collect { new File(javaBase, it) }
      .grep { it.exists() }
      .find()
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
